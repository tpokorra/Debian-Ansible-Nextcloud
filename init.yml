---
- hosts: nextcloud
  become: true

  tasks:

  #################################
  # install some default packages
  #################################
  - name: get some basic apt packages
    apt:
      name: ['git', 'cron']
      update_cache: yes
      state: latest

  ##################################
  # User that hosts the application
  ##################################
  - name: create unix user
    user:
      name: "{{pac}}-{{user}}"
      shell: /bin/bash
      home: "{{userhome}}"
      groups: www-data
      append: yes

  - name: add www-data to user's group
    user:
      name: "www-data"
      groups: "{{pac}}-{{user}}"
      append: yes

  - name: create doms directory
    file:
      path: "{{userhome}}/doms"
      state: directory
      mode: '0755'
      owner: '{{pac}}-{{user}}'
      group: 'www-data'

  - name: create domain directory
    file:
      path: "{{userhome}}/doms/{{domain}}"
      state: directory
      mode: '0755'
      owner: '{{pac}}-{{user}}'
      group: 'www-data'

  - name: create htdocs-ssl directory
    file:
      path: "{{userhome}}/doms/{{domain}}/htdocs-ssl"
      state: directory
      mode: '0755'
      owner: '{{pac}}-{{user}}'
      group: 'www-data'

  - name: create domain var directory
    file:
      path: "{{userhome}}/doms/{{domain}}/var"
      state: directory
      mode: '0755'
      owner: '{{pac}}-{{user}}'
      group: 'www-data'

  - name: Create document root
    file:
      path: "{{documentroot}}"
      state: directory
      owner: "www-data"
      mode: "0755"

  - name: add lingering for user for systemctl services
    command: loginctl enable-linger {{pac}}-{{user}}

  #################################
  # Setup repository for newer php
  #################################
  - name: Update apt dependencies
    apt:
      name: ['ca-certificates', 'software-properties-common', 'apt-transport-https', 'lsb-release']
      update_cache: yes
      state: latest

  - name: install the key of sury repo
    get_url:
      url: https://packages.sury.org/php/apt.gpg
      dest: /usr/share/keyrings/deb.sury.org-php.gpg

  - name: add sury repo
    shell: echo "deb [signed-by=/usr/share/keyrings/deb.sury.org-php.gpg] https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list

  #########################
  # Install Apache and PHP
  #########################
  - name: Install Apache and PHP Packages
    apt:
      name: ['apache2', 'php8.2', 'php8.2-mysql', 'libapache2-mod-php8.2', 'php8.2-common', 'php8.2-imagick', 'php8.2-fpm', 'php8.2-curl', 'php8.2-gd', 'php8.2-xml', 'php8.2-mbstring', 'php8.2-intl', 'php8.2-zip']
      update_cache: yes
      state: latest

  - name: Set up Apache virtualhost
    copy:
      dest: "/etc/apache2/sites-available/{{domain}}.conf"
      mode: 0644
      content: |
        <VirtualHost *:80>
            ServerAdmin webmaster@localhost
            ServerName {{domain}}
            DocumentRoot {{documentroot}}


            <Directory "{{documentroot}}">
                Options Indexes FollowSymlinks Includes
                Require all granted
                AllowOverride All
            </Directory>

            <FilesMatch \.php$>
                SetHandler "proxy:unix:/run/php/php8.2-fpm-{{pac}}-{{user}}.sock|fcgi://localhost"
            </FilesMatch>

            ErrorLog ${APACHE_LOG_DIR}/error.log
            CustomLog ${APACHE_LOG_DIR}/access.log combined
        </VirtualHost>

  - name: Copy fpm file
    copy:
      src: /etc/php/8.2/fpm/pool.d/www.conf
      dest: /etc/php/8.2/fpm/pool.d/fpm-{{pac}}-{{user}}.conf
      remote_src: yes

  - name: set name for fpm
    replace:
      path: /etc/php/8.2/fpm/pool.d/fpm-{{pac}}-{{user}}.conf
      regexp: "^\\[www]"
      replace: "[www-{{pac}}-{{user}}]"

  - name: set user for fpm
    replace:
      path: /etc/php/8.2/fpm/pool.d/fpm-{{pac}}-{{user}}.conf
      regexp: "^user = .*"
      replace: "user = {{pac}}-{{user}}"

  - name: set group for fpm
    replace:
      path: /etc/php/8.2/fpm/pool.d/fpm-{{pac}}-{{user}}.conf
      regexp: "^group = .*"
      replace: "group = {{pac}}-{{user}}"

  - name: set listen for fpm
    replace:
      path: /etc/php/8.2/fpm/pool.d/fpm-{{pac}}-{{user}}.conf
      regexp: "^listen = .*"
      replace: "listen = /run/php/php8.2-fpm-{{pac}}-{{user}}.sock"

  - name: increase memory for php
    replace:
      path: /etc/php/8.2/fpm/pool.d/fpm-{{pac}}-{{user}}.conf
      regexp: "^[;]+php_admin_value\\[memory_limit] = .*"
      replace: "php_admin_value[memory_limit] = 512M"

  - name: Enable new site
    shell: /usr/sbin/a2ensite {{ domain }}

  - name: Disable default Apache site
    shell: /usr/sbin/a2dissite 000-default.conf

  - name: Enable Apache modules for fpm
    shell: /usr/sbin/a2enmod alias proxy proxy_fcgi

  - name: Enable fpm configuration
    shell: /usr/sbin/a2enconf php8.2-fpm

  - name: Restart FPM
    service:
      name: php8.2-fpm
      state: restarted

  - name: Reload Apache
    service:
      name: apache2
      state: reloaded

  ####################################
  # setup the database
  ####################################
  - name: Install Mysql Server
    apt:
      name: ['mariadb-server', 'python3-pymysql']
      update_cache: yes
      state: latest

  - name: Check if mysql root password is unset
    shell: |
      mysql -u root -p'{{mysql_root_password}}' -h localhost -e "quit"
    changed_when: false
    ignore_errors: true
    register: root_pwd_check

  - name: Sets the root password
    mysql_user:
      name: root
      password: "{{mysql_root_password}}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    when: root_pwd_check.rc != 0

  - name: Removes the MySQL test database
    mysql_db:
      name: test
      state: absent
      login_unix_socket: /var/run/mysqld/mysqld.sock
      login_user: root
      login_password: "{{mysql_root_password}}"

  - name: create mysql database
    mysql_db:
      name: "{{pac}}_{{dbname}}"
      state: present
      login_unix_socket: /var/run/mysqld/mysqld.sock
      login_user: root
      login_password: "{{mysql_root_password}}"

  - name: create mysql user
    mysql_user:
      name: "{{pac}}_{{dbuser}}"
      password: "{{dbpassword}}"
      priv: "{{pac}}_{{dbname}}.*:ALL"
      login_unix_socket: /var/run/mysqld/mysqld.sock
      login_user: root
      login_password: "{{mysql_root_password}}"
